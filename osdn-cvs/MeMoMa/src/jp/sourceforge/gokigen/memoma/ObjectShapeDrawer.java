package jp.sourceforge.gokigen.memoma;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;

/**
 *   ÇﬂÇ‡Ç‹ÇÃÉIÉuÉWÉFÉNÉgÅEÉâÉCÉìÅEÉâÉxÉãÇï`âÊÇ∑ÇÈÉÅÉ\ÉbÉhåQ
 *   (åªç›ÇÃÇ∆Ç±ÇÎÅAMeMoMaCanvasDrawerÉNÉâÉXÇ©ÇÁí«Ç¢èoÇµÇƒÇ´ÇΩÇæÇØ...)
 * 
 * @author MRSa
 *
 */
public class ObjectShapeDrawer
{


    static public float drawObjectOval(Canvas canvas, RectF objectShape, Paint paint)
    {
        // ë»â~å`ÇÃï`âÊ
        canvas.drawOval(objectShape, paint);

        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2);
    }

    static public float drawObjectRect(Canvas canvas, RectF objectShape, Paint paint)
    {
		// éläpå`Çï`âÊÇ∑ÇÈ
        canvas.drawRect(objectShape, paint);
        return (0.0f);
    }

    static public float drawObjectRoundRect(Canvas canvas, RectF objectShape, Paint paint)
    {
		// ä€äpéläpå`ÇÃï`âÊ
        canvas.drawRoundRect(objectShape, MeMoMaObjectHolder.ROUNDRECT_CORNER_RX, MeMoMaObjectHolder.ROUNDRECT_CORNER_RY, paint);

        return (0.0f);
    }

    static public float drawObjectDiamond(Canvas canvas, RectF objectShape, Paint paint)
    {
		// ïHå`ÇÃï`âÊ
        Path path = new Path();
        path.moveTo(objectShape.centerX(), objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY());
        path.lineTo(objectShape.centerX(), objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.centerY());
        path.lineTo(objectShape.centerX(), objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2);
    }

    static public float drawObjectKeyboard(Canvas canvas, RectF objectShape, Paint paint)
    {
		// ë‰å`(ÉLÅ[É{Å[Éhå^)ÇÃï`âÊ
        Path path = new Path();
        path.moveTo(objectShape.left, objectShape.centerY() - MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN);
        path.lineTo(objectShape.left, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY() - MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN);
    }

    static public float drawObjectParallelogram(Canvas canvas, RectF objectShape, Paint paint)
    {
		// ïΩçsélï”å`ÇÃï`âÊ
        Path path = new Path();
        path.moveTo(objectShape.left + MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN, objectShape.top);
        path.lineTo(objectShape.left, objectShape.bottom);
        path.lineTo(objectShape.right - MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.top);
        path.lineTo(objectShape.left + MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN, objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectHexagonal(Canvas canvas, RectF objectShape, Paint paint)
    {
		// òZäpå`ÇÃï`âÊ
        Path path = new Path();
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 2;
        path.moveTo(objectShape.left + margin, objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY());
        path.lineTo(objectShape.left + margin, objectShape.bottom);
        path.lineTo(objectShape.right - margin, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.centerY());
        path.lineTo(objectShape.right - margin, objectShape.top);
        path.lineTo(objectShape.left + margin, objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectPaper(Canvas canvas, RectF objectShape, Paint paint)
    {
		// èëóﬁÇÃå`ÇÃï`âÊ
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 3.0f;
        Path path = new Path();
        path.moveTo(objectShape.left, objectShape.top);
        path.lineTo(objectShape.left, objectShape.bottom - margin);
        path.cubicTo((objectShape.left + objectShape.centerX()) / 2.0f , objectShape.bottom, (objectShape.right + objectShape.centerX()) / 2.0f, objectShape.bottom - margin, objectShape.right, objectShape.bottom - margin);
        path.lineTo(objectShape.right, objectShape.top);
        path.lineTo(objectShape.left, objectShape.top);
        canvas.drawPath(path, paint);
        return ( - MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN);
    }

    static public float drawObjectDrum(Canvas canvas, RectF objectShape, Paint paint, Paint.Style paintStyle)
    {
		float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 1.0f;
		// â~íåÇÃï`âÊ
        Path path = new Path();
        path.moveTo(objectShape.left, objectShape.top);
        path.arcTo(new RectF(objectShape.left, objectShape.top,objectShape.right, objectShape.top + margin), 180.0f, 359.999f, true);
        path.lineTo(objectShape.left, objectShape.bottom - (margin / 2.0f));
        path.arcTo(new RectF(objectShape.left, objectShape.bottom - margin, objectShape.right, objectShape.bottom), 180.0f, -180.0f, true);
        path.lineTo(objectShape.right, objectShape.top + (margin / 2.0f));
        if (paintStyle != Paint.Style.STROKE)
        {
        	// ìhÇËÇ¬Ç‘ÇµópÇ…ê¸ÇÃóÃàÊÇí«â¡Ç∑ÇÈ
            path.arcTo(new RectF(objectShape.left, objectShape.top, objectShape.right, objectShape.top + margin), 180.0f, 180.0f, true);
            path.lineTo(objectShape.left, objectShape.bottom - (margin / 2.0f));
            path.arcTo(new RectF(objectShape.left, objectShape.bottom - margin, objectShape.right, objectShape.bottom), 180.0f, -180.0f, true);
        }
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectCircle(Canvas canvas, RectF objectShape, Paint paint)
    {
		// â~Çï`âÊÇ∑ÇÈ
        canvas.drawCircle(objectShape.centerX(), objectShape.centerY(), ((objectShape.right - objectShape.left)/ 2.0f), paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectNoRegion(Canvas canvas, RectF objectShape, Paint paint)
    {
		// âΩÇ‡ï\é¶ÇµÇ»Ç¢Ç∆ÇÌÇ©ÇÁÇ»Ç¢ÇÃÇ≈ÅAÉâÉxÉãÇ™ñ≥Ç¢Ç∆Ç´Ç…ÇÕògÇï\é¶Ç∑ÇÈ
        paint.setColor(Color.DKGRAY);
        canvas.drawRect(objectShape, paint);
        paint.setColor(Color.WHITE);
        return (0.0f);
    }

    static public float drawObjectLoopStart(Canvas canvas, RectF objectShape, Paint paint)
    {
		// ÉãÅ[ÉväJénê}å`ÇÃï`âÊ
        Path path = new Path();
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 2;
        path.moveTo(objectShape.left + margin, objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY());
        path.lineTo(objectShape.left, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.centerY());
        path.lineTo(objectShape.right - margin, objectShape.top);
        path.lineTo(objectShape.left + margin, objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectLoopEnd(Canvas canvas, RectF objectShape, Paint paint)
    {
		// ÉãÅ[ÉvèIóπê}å`ÇÃï`âÊ
        Path path = new Path();
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 2;
        path.moveTo(objectShape.left, objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY());
        path.lineTo(objectShape.left + margin, objectShape.bottom);
        path.lineTo(objectShape.right - margin, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.centerY());
        path.lineTo(objectShape.right, objectShape.top);
        path.lineTo(objectShape.left, objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectLeftArrow(Canvas canvas, RectF objectShape, Paint paint)
    {
		// ç∂ë§ñÓàÛê}å`ÇÃï`âÊ
        Path path = new Path();
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 4.0f;
        path.moveTo(objectShape.left + margin, objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY());
        path.lineTo(objectShape.left + margin, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.top);
        path.lineTo(objectShape.left + margin, objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectDownArrow(Canvas canvas, RectF objectShape, Paint paint)
    {
		// â∫ë§ñÓàÛê}å`ÇÃï`âÊ
        Path path = new Path();
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 2;
        path.moveTo(objectShape.left, objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY() + margin);
        path.lineTo(objectShape.centerX(), objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.centerY() + margin);
        path.lineTo(objectShape.right, objectShape.top);
        path.lineTo(objectShape.left, objectShape.top);
        canvas.drawPath(path, paint);
        return (- MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN);
    }

    static public float drawObjectUpArrow(Canvas canvas, RectF objectShape, Paint paint)
    {
		// è„ë§ñÓàÛê}å`ÇÃï`âÊ
        Path path = new Path();
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 2.0f;
        path.moveTo(objectShape.centerX(), objectShape.top);
        path.lineTo(objectShape.left, objectShape.centerY() - margin);
        path.lineTo(objectShape.left, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.centerY() - margin);
        path.lineTo(objectShape.centerX(), objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public float drawObjectRightArrow(Canvas canvas, RectF objectShape, Paint paint)
    {
		// âEë§ñÓàÛê}å`ÇÃï`âÊ
        Path path = new Path();
        float margin = MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 4.0f;
        path.moveTo(objectShape.left, objectShape.top);
        path.lineTo(objectShape.left, objectShape.bottom);
        path.lineTo(objectShape.right - margin, objectShape.bottom);
        path.lineTo(objectShape.right, objectShape.centerY());
        path.lineTo(objectShape.right - margin, objectShape.top);
        path.lineTo(objectShape.left, objectShape.top);
        canvas.drawPath(path, paint);
        return (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN / 2.0f);
    }

    static public void drawLineStraight(Canvas canvas)
    {
    	
    }
	  /**
	   *    ñÓàÛÇï`âÊÇ∑ÇÈèàóù (ÉcÉäÅ[ï\é¶éû)
	   * 
	   * @param canvas
	   * @param paint
	   * @param x1
	   * @param y1
	   * @param checkVaule
	   * @param isXaxis
	   */
	static public void drawArrowTree(Canvas canvas, Paint paint, float x1, float y1, float checkValue, boolean isXaxis)
    {
		float margin = 8.0f;
	  	float direction = 1.0f;
	  	if (isXaxis == true)
        {
	  	    direction = (checkValue < x1) ? -1.0f : 1.0f;
            canvas.drawLine(x1, y1, (x1 + direction * margin), (y1 - margin), paint);
	        canvas.drawLine(x1, y1, (x1 + direction * margin), (y1 + margin), paint);
	  	}
	  	else
	  	{
	  	    direction = (checkValue < y1) ? -1.0f : 1.0f;
	        canvas.drawLine(x1, y1, (x1 - margin), (y1 + direction * margin), paint);
	        canvas.drawLine(x1, y1, (x1 + margin), (y1 + direction * margin), paint);    		  
	  	}
    }
	  /**
	   *    ñÓàÛÇï`âÊÇ∑ÇÈèàóù
	   * 
	   * @param canvas
	   * @param paint
	   * @param x1
	   * @param y1
	   * @param x2
	   * @param y2
	   */
	  static public void drawArrow(Canvas canvas, Paint paint, float x1, float y1, float x2, float y2)
	  {
          // ñÓàÛê¸ÇÃí∑Ç≥
		  float moveX = 14.0f;
		  
		  // ê⁄ë±ê¸ÇÃåXÇ´Ç™ÅAÇ«ÇÍÇ≠ÇÁÇ¢ÇÃäpìxÇ≈ì¸Ç¡ÇƒÇ¢ÇÈÇ©ÅH
		  float centerDegree = (float) (Math.atan2((y2 - y1) , (x2 - x1))  * 180.0d / Math.PI);

		  // x1, y1 Ç… x2, y2 ï˚å¸Ç©ÇÁóàÇΩê¸Ç…çáÇÌÇπÇΩñÓàÛÇï`âÊÇ∑ÇÈ
		  // (2ñ{ÅAÇPñ{Ç√Ç¬à¯Ç¢ÇƒÅAÇªÇÍÇâÒì]çsóÒÇ≈âÒì]Ç≥ÇπÇƒÇ¢ÇÈ)

		  // âÒì]çsóÒÇÃèÄîı
		  Matrix matrix1 = new Matrix();
		  matrix1.setRotate((centerDegree + 30), x1, y1);
	      Matrix matrix2 = new Matrix();
		  matrix2.setRotate((centerDegree - 30), x1, y1);

		  // ê¸ï™Çà¯Ç¢ÇΩå„ÅAâÒì]çsóÒÇ≈âÒì]Ç≥ÇπÇÈ
		  Path pathLine1 = new Path();
	      pathLine1.moveTo(x1, y1);
	      pathLine1.lineTo(x1 + moveX, y1);
	      pathLine1.transform(matrix1);
	      canvas.drawPath(pathLine1, paint);

		  Path pathLine2 = new Path();
	      pathLine2.moveTo(x1, y1);
	      pathLine2.lineTo(x1 + moveX, y1);
	      pathLine2.transform(matrix2);
	      canvas.drawPath(pathLine2, paint);
    }

	  /**
	     *    ÉIÉuÉWÉFÉNÉgÇÃÉâÉxÉãÇï\é¶Ç∑ÇÈ
	     * 
	     * @param canvas
	     * @param paint
	     * @param pos
	     */
	    public static void drawTextLabel(Canvas canvas, Paint paint, MeMoMaObjectHolder.PositionObject pos, RectF region, int displayObjectInformation, float offsetX, float offsetY)
	    {
    		// É^ÉCÉgÉãÇÃêÊì™ïîï™Çï\é¶Ç∑ÇÈèÍçá...
        	String labelToShow = pos.label;
        	if (displayObjectInformation == 0)
        	{
            	float width = region.width() - MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN_WIDTH;
                int textLen = paint.breakText(pos.label, true, width, null);  // è»ó™ï∂éöÇí«â¡Ç∑ÇÈÇ©ÇÁÅAÇªÇÃÇ‘ÇÒå∏ÇÁÇ∑
            	labelToShow = labelToShow.substring(0, textLen);
            	if (labelToShow != pos.label)
            	{
            		// truncate ÇµÇΩèÍçáÇ…ÇÕÅAè»ó™ï∂éöÇèoÇ∑ÅB
            		labelToShow = labelToShow + "...";
            	}
        	}

        	if (Paint.Style.valueOf(pos.paintStyle) != Paint.Style.STROKE)
	        {
	    	    // ÉIÉuÉWÉFÉNÉgÇìhÇËÇ¬Ç‘Ç∑ÇÃÇ∆Ç´ÇÕÅAï∂éöÇÃêFÇê›íËÇ∑ÇÈ
	            paint.setColor(pos.labelColor);
	        }
	        
	        // ï∂éöÇÇøÇÂÇ¡Ç∆âeïtÇ´Ç…Ç∑ÇÈ
	        paint.setShadowLayer(0.5f, 0.5f, 0.5f, Color.DKGRAY);
	        
	        // ÉÜÅ[ÉUÉ`ÉFÉbÉNÇÃï`âÊ
	        if (pos.userChecked == true)
	        {
	        	canvas.drawText("*", region.centerX(), region.top + (MeMoMaCanvasDrawer.OBJECTLABEL_MARGIN * 2.0f), paint);
	       }
	        
	        // ã≠í≤ï\é¶
	        if (pos.strokeWidth != 0.0f)
	        {
	        	// ÇªÇÃÇ‹Ç‹ï\é¶Ç∑ÇÈÇ∆ÅAì«ÇﬂÇ»Ç¢ÇÃÇ≈ÅAëæÇ≥Çí≤êÆÇµÅAÉAÉìÉ_Å[ÉâÉCÉìÇà¯Ç≠Ç±Ç∆Ç…Ç∑ÇÈ
	        	paint.setStrokeWidth(0.0f);
	            paint.setSubpixelText(true);
	            paint.setUnderlineText (true);
	        }

	        if (displayObjectInformation == 0)
	        {            
	        	// ÇPçsï™ÇµÇ©ï\é¶ÇµÇ»Ç¢èÍçá...ÇªÇÃÇ‹Ç‹ï\é¶ÇµÇƒèIóπÇ∑ÇÈ
	            canvas.drawText(labelToShow, (region.left + offsetX),   (region.centerY() + offsetY), paint);
	            return;
	        }
	        
	        float tall = paint.getFontMetrics().top + 1.0f;
	        float posX = (region.left + offsetX);
	        float posY =  (region.centerY() + offsetY);
	        float width = region.right - region.left - 12.0f;  // ïù

	        int startChar  = 0;
	        int endChar = pos.label.length();
	        do
	        {
	            int textLen = paint.breakText(pos.label, startChar, endChar, true, width, null);
	            canvas.drawText(labelToShow, startChar, (startChar +textLen), posX, posY, paint);

	            posY = posY - tall;
	            startChar = startChar + textLen;
	        } while (startChar < endChar);  
	    }
}
